name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build source distribution
        run: |
          python -m pip install -U pip build
          python -m build -s

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*

  # ----- Linux x86_64 (native) -----
  wheels-linux-x86_64:
    name: Build Linux wheels (x86_64)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache compiled objects across ABIs & runs
      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-linux-x86_64-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/*.cpp', '**/*.h', 'pyproject.toml') }}

      # Cache third-party source tarballs so BEFORE_ALL can just extract
      - name: Restore 3rdparty source cache
        uses: actions/cache@v4
        with:
          path: build-cache
          key: thirdparty-src-x86_64-fftw-3.3.10-boost-1_84_0

      - name: Pre-fetch Boost/FFTW (host)
        run: |
          set -eux
          mkdir -p build-cache
          # FFTW
          test -f build-cache/fftw-3.3.10.tar.gz || \
            curl -fsSL -o build-cache/fftw-3.3.10.tar.gz http://www.fftw.org/fftw-3.3.10.tar.gz
          # Boost headers
          test -f build-cache/boost_1_84_0.tar.gz || \
            curl -fsSL -o build-cache/boost_1_84_0.tar.gz https://archives.boost.io/release/1.84.0/source/boost_1_84_0.tar.gz

      - name: Build wheels with cibuildwheel (x86_64)
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: cp310-* cp311-* cp312-*
          CIBW_SKIP: pp* *-musllinux_*
          CIBW_ARCHS_LINUX: x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL_LINUX: |
            set -eux

            # --- Ensure ccache & ninja exist inside the manylinux container ---
            have_ccache=0
            if command -v dnf >/dev/null 2>&1; then
              dnf -y install ccache pkgconfig ninja-build || true
            elif command -v yum >/dev/null 2>&1; then
              yum -y install ccache pkgconfig ninja-build || true
            elif command -v microdnf >/dev/null 2>&1; then
              microdnf -y install ccache pkgconfig ninja-build || true
            fi
            if command -v ccache >/dev/null 2>&1; then
              have_ccache=1
            else
              # Fallback: fetch a static ccache binary (no package manager needed)
              arch="$(uname -m)"
              ver="4.9.1"
              url_x86_64="https://github.com/ccache/ccache/releases/download/v${ver}/ccache-${ver}-linux-x86_64.tar.xz"
              url_aarch64="https://github.com/ccache/ccache/releases/download/v${ver}/ccache-${ver}-linux-aarch64.tar.xz"
              url="${url_x86_64}"
              [ "$arch" = "aarch64" ] && url="${url_aarch64}"
              curl -fsSL "${url}" -o /tmp/ccache.tar.xz
              mkdir -p /usr/local/ccache && tar -xJf /tmp/ccache.tar.xz -C /usr/local/ccache --strip-components=1
              ln -sf /usr/local/ccache/bin/ccache /usr/local/bin/ccache
              have_ccache=1
            fi

            # Ensure ninja exists too (fallback to portable binary if needed)
            if ! command -v ninja >/dev/null 2>&1; then
              curl -fsSL -o /usr/local/bin/ninja https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
              # some images have no unzip; use busybox if present, else fetch static:
              if command -v unzip >/dev/null 2>&1; then
                tmpd="$(mktemp -d)" && mv /usr/local/bin/ninja "$tmpd/ninja.zip"
                unzip -p "$tmpd/ninja.zip" > /usr/local/bin/ninja && chmod +x /usr/local/bin/ninja
              else
                # fallback: use curl to a pre-unzipped mirror if you have one; or install unzip via dnf/yum above
                echo "ninja fallback requires unzip; please enable unzip in package install above" >&2
                exit 1
              fi
            fi

            # --- Build prerequisites we cache (FFTW & Boost headers) ---
            mkdir -p /opt/fftw /opt/boost/include
            tar -xzf /project/build-cache/fftw-3.3.10.tar.gz -C /tmp
            tar -xzf /project/build-cache/boost_1_84_0.tar.gz -C /tmp

            pushd /tmp/fftw-3.3.10
            ./configure --prefix=/opt/fftw --enable-shared --enable-threads --disable-fortran --disable-mpi
            make -j"$(nproc)"
            make install
            popd

            cp -r /tmp/boost_1_84_0/boost /opt/boost/include/

          CIBW_ENVIRONMENT_LINUX: >
            PKG_CONFIG_PATH=/opt/fftw/lib/pkgconfig
            CMAKE_PREFIX_PATH=/opt/fftw
            CCACHE_DIR=/project/.ccache
            CMAKE_ARGS="-G Ninja -DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON -DBOOST_INCLUDE_DIR=/opt/boost/include -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
            CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            bash -lc 'LD_LIBRARY_PATH=/opt/fftw/lib auditwheel repair -w {dest_dir} {wheel}'
          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: |
            python - <<'PY'
            import numpy as np, cpp_hf
            nk,d=4,2
            w=np.ones((nk,nk))*((2/nk)*(2/nk)/(2*np.pi)**2)
            H=np.zeros((nk,nk,d,d),np.complex128)
            K=np.linspace(-1,1,nk)
            V=(1.0/np.sqrt((K[:,None]**2+K[None,:]**2)+0.2)).astype(np.complex128)[...,None,None]
            P0=np.zeros_like(H)
            ne=0.5*d*w.sum()
            P,F,E,mu,n=cpp_hf.hartreefock_iteration_cpp(w,H,V,P0,ne,0.2,1,1e-2,2,1.0)
            print("wheel ok", int(n), float(mu))
            PY

      - name: Upload Linux x86_64 wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-linux-x86_64
          path: wheelhouse/*
          if-no-files-found: error

  # ----- Linux aarch64 (native ARM runner) -----
  wheels-linux-aarch64:
    name: Build Linux wheels (aarch64 — native)
    # For public repos you can use ubuntu-24.04-arm / ubuntu-22.04-arm.
    # For private repos, switch to your self-hosted arm64 runner label.
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-linux-arm64-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/*.cpp', '**/*.h', 'pyproject.toml') }}

      - name: Restore 3rdparty source cache
        uses: actions/cache@v4
        with:
          path: build-cache
          key: thirdparty-src-arm64-fftw-3.3.10-boost-1_84_0

      - name: Pre-fetch Boost/FFTW (host)
        run: |
          set -eux
          mkdir -p build-cache
          test -f build-cache/fftw-3.3.10.tar.gz || \
            curl -fsSL -o build-cache/fftw-3.3.10.tar.gz http://www.fftw.org/fftw-3.3.10.tar.gz
          test -f build-cache/boost_1_84_0.tar.gz || \
            curl -fsSL -o build-cache/boost_1_84_0.tar.gz https://archives.boost.io/release/1.84.0/source/boost_1_84_0.tar.gz

      - name: Build wheels with cibuildwheel (aarch64)
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: cp310-* cp311-* cp312-*
          CIBW_SKIP: pp* *-musllinux_*
          CIBW_ARCHS_LINUX: aarch64
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL_LINUX: |
            set -eux

            # --- Ensure ccache & ninja exist inside the manylinux container ---
            have_ccache=0
            if command -v dnf >/dev/null 2>&1; then
              dnf -y install ccache pkgconfig ninja-build || true
            elif command -v yum >/dev/null 2>&1; then
              yum -y install ccache pkgconfig ninja-build || true
            elif command -v microdnf >/dev/null 2>&1; then
              microdnf -y install ccache pkgconfig ninja-build || true
            fi
            if command -v ccache >/dev/null 2>&1; then
              have_ccache=1
            else
              # Fallback: fetch a static ccache binary (no package manager needed)
              arch="$(uname -m)"
              ver="4.9.1"
              url_x86_64="https://github.com/ccache/ccache/releases/download/v${ver}/ccache-${ver}-linux-x86_64.tar.xz"
              url_aarch64="https://github.com/ccache/ccache/releases/download/v${ver}/ccache-${ver}-linux-aarch64.tar.xz"
              url="${url_x86_64}"
              [ "$arch" = "aarch64" ] && url="${url_aarch64}"
              curl -fsSL "${url}" -o /tmp/ccache.tar.xz
              mkdir -p /usr/local/ccache && tar -xJf /tmp/ccache.tar.xz -C /usr/local/ccache --strip-components=1
              ln -sf /usr/local/ccache/bin/ccache /usr/local/bin/ccache
              have_ccache=1
            fi

            # Ensure ninja exists too (fallback to portable binary if needed)
            if ! command -v ninja >/dev/null 2>&1; then
              curl -fsSL -o /usr/local/bin/ninja https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
              # some images have no unzip; use busybox if present, else fetch static:
              if command -v unzip >/dev/null 2>&1; then
                tmpd="$(mktemp -d)" && mv /usr/local/bin/ninja "$tmpd/ninja.zip"
                unzip -p "$tmpd/ninja.zip" > /usr/local/bin/ninja && chmod +x /usr/local/bin/ninja
              else
                # fallback: use curl to a pre-unzipped mirror if you have one; or install unzip via dnf/yum above
                echo "ninja fallback requires unzip; please enable unzip in package install above" >&2
                exit 1
              fi
            fi

            # --- Build prerequisites we cache (FFTW & Boost headers) ---
            mkdir -p /opt/fftw /opt/boost/include
            tar -xzf /project/build-cache/fftw-3.3.10.tar.gz -C /tmp
            tar -xzf /project/build-cache/boost_1_84_0.tar.gz -C /tmp

            pushd /tmp/fftw-3.3.10
            ./configure --prefix=/opt/fftw --enable-shared --enable-threads --disable-fortran --disable-mpi
            make -j"$(nproc)"
            make install
            popd

            cp -r /tmp/boost_1_84_0/boost /opt/boost/include/

          CIBW_ENVIRONMENT_LINUX: >
            PKG_CONFIG_PATH=/opt/fftw/lib/pkgconfig
            CMAKE_PREFIX_PATH=/opt/fftw
            CCACHE_DIR=/project/.ccache
            CMAKE_ARGS="-G Ninja -DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON -DBOOST_INCLUDE_DIR=/opt/boost/include -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
            CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            bash -lc 'LD_LIBRARY_PATH=/opt/fftw/lib auditwheel repair -w {dest_dir} {wheel}'
          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: |
            python - <<'PY'
            import numpy as np, cpp_hf
            nk,d=4,2
            w=np.ones((nk,nk))*((2/nk)*(2/nk)/(2*np.pi)**2)
            H=np.zeros((nk,nk,d,d),np.complex128)
            K=np.linspace(-1,1,nk)
            V=(1.0/np.sqrt((K[:,None]**2+K[None,:]**2)+0.2)).astype(np.complex128)[...,None,None]
            P0=np.zeros_like(H)
            ne=0.5*d*w.sum()
            P,F,E,mu,n=cpp_hf.hartreefock_iteration_cpp(w,H,V,P0,ne,0.2,1,1e-2,2,1.0)
            print("wheel ok", int(n), float(mu))
            PY

      - name: Upload Linux aarch64 wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-linux-aarch64
          path: wheelhouse/*
          if-no-files-found: error

  # ----- macOS (Intel/Apple Silicon) -----
  wheels-macos:
    name: Build macOS wheels (Intel/Apple Silicon)
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-13, macos-14]
    runs-on: ${{ matrix.runner }}
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.runner == 'macos-14' && '14.0' || '13.0' }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Homebrew deps
        env:
          HOMEBREW_NO_AUTO_UPDATE: "1"
        run: |
          rm -f "$HOME/Library/Caches/Homebrew/downloads/"*libomp* || true
          brew install fftw libomp boost cmake ninja || true

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: cp310-* cp311-* cp312-*
          CIBW_SKIP: pp*
          CIBW_ARCHS_MACOS: native
          CIBW_ENVIRONMENT_MACOS: >
            PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig
            CMAKE_ARGS="-DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            bash -lc 'delocate-listdeps -d {wheel} || true; MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} delocate-wheel -L /opt/homebrew/lib -L /usr/local/lib --require-archs {delocate_archs} -w {dest_dir} -v {wheel}'
          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: |
            python - <<'PY'
            import numpy as np, cpp_hf
            nk,d=4,2
            w=np.ones((nk,nk))*((2/nk)*(2/nk)/(2*np.pi)**2)
            H=np.zeros((nk,nk,d,d),np.complex128)
            K=np.linspace(-1,1,nk)
            V=(1.0/np.sqrt((K[:,None]**2+K[None,:]**2)+0.2)).astype(np.complex128)[...,None,None]
            P0=np.zeros_like(H)
            ne=0.5*d*w.sum()
            P,F,E,mu,n=cpp_hf.hartreefock_iteration_cpp(w,H,V,P0,ne,0.2,1,1e-2,2,1.0)
            print("wheel ok", int(n), float(mu))
            PY

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-${{ matrix.runner }}
          path: wheelhouse/*
          if-no-files-found: error

  # ----- Publish to PyPI -----
  publish:
    name: Publish to PyPI
    needs: [sdist, wheels-linux-x86_64, wheels-linux-aarch64, wheels-macos]
    runs-on: ubuntu-latest
    # 🔐 Ensure the OIDC token includes the environment claim
    environment: cpp_hf_env
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - name: Publish to PyPI via OIDC (Trusted Publisher)
        if: startsWith(github.ref, 'refs/tags/v')  # publish only on v* tags
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
