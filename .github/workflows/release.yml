name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

# ---- Centralized version pins for Linux path ----
env:
  # Tooling
  CCACHE_VER: "4.11.3"      # Linux tarballs (x86_64/aarch64)
  CIBW_VER: "v3.0.1"        # cibuildwheel tag
  PYTHON_VER: "3.12"        # runner Python to drive builds

  # Native deps (Linux build)
  FFTW_VER: "3.3.10"
  BOOST_VER_U: "1_89_0"     # underscored for URL
  BOOST_VER_D: "1.89.0"     # dotted for path

jobs:
  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VER }}

      - name: Build source distribution
        run: |
          python -m pip install -U pip build
          python -m build -s

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*


  wheels-linux-x86_64:
    name: Build Linux wheels (x86_64)
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@${{ env.CIBW_VER }}
        env:
          CIBW_BUILD: cp310-manylinux_x86_64 cp311-manylinux_x86_64 cp312-manylinux_x86_64
          CIBW_ARCHS_LINUX: x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28

          # ---- same pinned prebuilds as before ----
          CIBW_BEFORE_ALL_LINUX: |
            set -eux
            if command -v yum >/dev/null 2>&1; then yum -y install pkgconfig xz || true; fi
            ARCH="x86_64"; CCACHE_ARCH="linux-x86_64"
            curl -fsSL -o /tmp/ccache.tar.xz "https://github.com/ccache/ccache/releases/download/v${CCACHE_VER}/ccache-${CCACHE_VER}-${CCACHE_ARCH}.tar.xz"
            mkdir -p /opt/ccache && tar -C /opt/ccache -xJf /tmp/ccache.tar.xz --strip-components=1
            export PATH="/opt/ccache/bin:$PATH"; ccache --version; ccache --set-config=max_size=2G || true
            curl -fsSL -o /tmp/fftw.tar.gz "http://www.fftw.org/fftw-${FFTW_VER}.tar.gz"
            tar -C /tmp -xzf /tmp/fftw.tar.gz
            pushd /tmp/fftw-${FFTW_VER}; ./configure --prefix=/opt/fftw --enable-shared --enable-threads
            make -j"$(nproc)"; make install; popd
            curl -fsSL -o /tmp/boost.tar.gz "https://archives.boost.io/release/${BOOST_VER_D}/source/boost_${BOOST_VER_U}.tar.gz"
            tar -C /tmp -xzf /tmp/boost.tar.gz
            mkdir -p /opt/boost/include; cp -r /tmp/boost_${BOOST_VER_U}/boost /opt/boost/include/

          CIBW_ENVIRONMENT_LINUX: >
            PATH=/opt/ccache/bin:$PATH
            CCACHE_DIR=/root/.ccache
            PKG_CONFIG_PATH=/opt/fftw/lib/pkgconfig
            CMAKE_PREFIX_PATH=/opt/fftw
            CMAKE_ARGS="-DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON -DBOOST_INCLUDE_DIR=/opt/boost/include"

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            bash -lc 'LD_LIBRARY_PATH=/opt/fftw/lib auditwheel repair -w {dest_dir} {wheel}'

          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: |
            python - <<'PY'
            import numpy as np, cpp_hf
            nk,d=4,2
            w=np.ones((nk,nk))*((2/nk)*(2/nk)/(2*np.pi)**2)
            H=np.zeros((nk,nk,d,d),np.complex128)
            K=np.linspace(-1,1,nk)
            V=(1.0/np.sqrt((K[:,None]**2+K[None,:]**2)+0.2)).astype(np.complex128)[...,None,None]
            P0=np.zeros_like(H)
            ne=0.5*d*w.sum()
            P,F,E,mu,n=cpp_hf.hartreefock_iteration_cpp(w,H,V,P0,ne,0.2,1,1e-2,2,1.0)
            print("wheel ok", int(n), float(mu))
            PY

      - uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-linux-x86_64
          path: wheelhouse/*
          if-no-files-found: error

  wheels-linux-aarch64:
    name: Build Linux wheels (aarch64, native)
    runs-on: ubuntu-24.04-arm
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@${{ env.CIBW_VER }}
        env:
          CIBW_BUILD: cp310-manylinux_aarch64 cp311-manylinux_aarch64 cp312-manylinux_aarch64
          CIBW_ARCHS_LINUX: aarch64
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28

          # identical prebuild steps, just set arch to aarch64 and pick the right ccache tarball
          CIBW_BEFORE_ALL_LINUX: |
            set -eux
            if command -v yum >/dev/null 2>&1; then yum -y install pkgconfig xz || true; fi
            ARCH="aarch64"; CCACHE_ARCH="linux-aarch64"
            curl -fsSL -o /tmp/ccache.tar.xz "https://github.com/ccache/ccache/releases/download/v${CCACHE_VER}/ccache-${CCACHE_VER}-${CCACHE_ARCH}.tar.xz"
            mkdir -p /opt/ccache && tar -C /opt/ccache -xJf /tmp/ccache.tar.xz --strip-components=1
            export PATH="/opt/ccache/bin:$PATH"; ccache --version; ccache --set-config=max_size=2G || true
            curl -fsSL -o /tmp/fftw.tar.gz "http://www.fftw.org/fftw-${FFTW_VER}.tar.gz"
            tar -C /tmp -xzf /tmp/fftw.tar.gz
            pushd /tmp/fftw-${FFTW_VER}; ./configure --prefix=/opt/fftw --enable-shared --enable-threads
            make -j"$(nproc)"; make install; popd
            curl -fsSL -o /tmp/boost.tar.gz "https://archives.boost.io/release/${BOOST_VER_D}/source/boost_${BOOST_VER_U}.tar.gz"
            tar -C /tmp -xzf /tmp/boost.tar.gz
            mkdir -p /opt/boost/include; cp -r /tmp/boost_${BOOST_VER_U}/boost /opt/boost/include/

          CIBW_ENVIRONMENT_LINUX: >
            PATH=/opt/ccache/bin:$PATH
            CCACHE_DIR=/root/.ccache
            PKG_CONFIG_PATH=/opt/fftw/lib/pkgconfig
            CMAKE_PREFIX_PATH=/opt/fftw
            CMAKE_ARGS="-DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON -DBOOST_INCLUDE_DIR=/opt/boost/include"

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            bash -lc 'LD_LIBRARY_PATH=/opt/fftw/lib auditwheel repair -w {dest_dir} {wheel}'

          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: |
            python - <<'PY'
            import numpy as np, cpp_hf
            nk,d=4,2
            w=np.ones((nk,nk))*((2/nk)*(2/nk)/(2*np.pi)**2)
            H=np.zeros((nk,nk,d,d),np.complex128)
            K=np.linspace(-1,1,nk)
            V=(1.0/np.sqrt((K[:,None]**2+K[None,:]**2)+0.2)).astype(np.complex128)[...,None,None]
            P0=np.zeros_like(H)
            ne=0.5*d*w.sum()
            P,F,E,mu,n=cpp_hf.hartreefock_iteration_cpp(w,H,V,P0,ne,0.2,1,1e-2,2,1.0)
            print("wheel ok", int(n), float(mu))
            PY

      - uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-linux-aarch64
          path: wheelhouse/*
          if-no-files-found: error

  wheels-macos:
    name: Build macOS wheels (Intel/Apple Silicon)
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-13, macos-14]
    runs-on: ${{ matrix.runner }}
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.runner == 'macos-14' && '14.0' || '13.0' }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Homebrew-only on macOS (latest formulas)
      - name: Install Homebrew deps
        env:
          HOMEBREW_NO_AUTO_UPDATE: "1"
        run: |
          set -eux
          # Keep brew metadata stable during CI run, but accept current formula versions
          rm -f "$HOME/Library/Caches/Homebrew/downloads/"*libomp* || true
          brew install ccache fftw libomp boost cmake ninja || true
          # Make sure ccache is on PATH and usable
          echo 'export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"' >> "$HOME/.bash_profile" || true
          echo 'export PATH="/usr/local/opt/ccache/libexec:$PATH"'   >> "$HOME/.bash_profile" || true
          export PATH="/opt/homebrew/opt/ccache/libexec:$PATH:/usr/local/opt/ccache/libexec:$PATH"
          ccache --version || true

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@${{ env.CIBW_VER }}
        env:
          CIBW_BUILD: cp310-* cp311-* cp312-*
          CIBW_SKIP: pp*
          CIBW_ARCHS_MACOS: native
          CIBW_ENVIRONMENT_MACOS: >
            PATH=/opt/homebrew/opt/ccache/libexec:/usr/local/opt/ccache/libexec:$PATH
            PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig
            CMAKE_ARGS="-DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            bash -lc 'delocate-listdeps -d {wheel} || true; MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} delocate-wheel -L /opt/homebrew/lib -L /usr/local/lib --require-archs {delocate_archs} -w {dest_dir} -v {wheel}'
          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: |
            python - <<'PY'
            import numpy as np, cpp_hf
            nk,d=4,2
            w=np.ones((nk,nk))*((2/nk)*(2/nk)/(2*np.pi)**2)
            H=np.zeros((nk,nk,d,d),np.complex128)
            K=np.linspace(-1,1,nk)
            V=(1.0/np.sqrt((K[:,None]**2+K[None,:]**2)+0.2)).astype(np.complex128)[...,None,None]
            P0=np.zeros_like(H)
            ne=0.5*d*w.sum()
            P,F,E,mu,n=cpp_hf.hartreefock_iteration_cpp(w,H,V,P0,ne,0.2,1,1e-2,2,1.0)
            print("wheel ok", int(n), float(mu))
            PY

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-${{ matrix.runner }}
          path: wheelhouse/*
          if-no-files-found: error

  publish:
    name: Publish to PyPI
    needs: [sdist, wheels-linux-x86_64, wheels-linux-aarch64, wheels-macos]
    runs-on: ubuntu-latest
    environment: cpp_hf_env   # must match Trusted Publisher environment on PyPI
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - name: Publish to PyPI via OIDC (Trusted Publisher)
        if: startsWith(github.ref, 'refs/tags/v')  # publish only on v* tags
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
