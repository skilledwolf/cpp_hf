[build-system]
requires = [
  "scikit-build-core>=0.9",
  "pybind11>=2.11",
  "numpy",
  "setuptools_scm>=7",
]
build-backend = "scikit_build_core.build"

[project]
name = "cpp_hf"
dynamic = ["version"]
description = "Hartreeâ€“Fock (k-grid) with FFTW + Eigen via pybind11"
readme = "Readme.md"
requires-python = ">=3.8"
authors = [{name = "ContiMod contributors"}]
license = {file = "LICENSE"}
keywords = ["hartree-fock", "fftw", "eigen", "pybind11", "condensed-matter", "physics"]
classifiers = [
  "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: C++",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Topic :: Scientific/Engineering :: Physics",
]

[project.urls]
Homepage = "https://github.com/skilledwolf/cpp_hf"
Issues = "https://github.com/skilledwolf/cpp_hf/issues"

[tool.scikit-build]
# Optional: produce a per-tag build dir (nice for local dev)
build-dir = "build/{wheel_tag}"
# Required to enable non-builtin metadata version providers (setuptools_scm)
experimental = true

[tool.scikit-build.cmake]
version = ">=3.21"

# You can pass -C cmake.define.X=... flags via pip to toggle features:
#   pip install . -C cmake.define.HF_USE_OPENMP=ON -C cmake.define.HF_USE_FFTW_THREADS=ON

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.setuptools_scm"

[tool.setuptools_scm]
# Strip leading 'v' from tags like v1.2.3 automatically
version_scheme = "guess-next-dev"
local_scheme = "node-and-date"
fallback_version = "0.0"

[tool.scikit-build.wheel]
# Ensure license and notices are embedded in the wheel metadata
license-files = [
  "LICENSE",
  "THIRD_PARTY_NOTICES.md",
]

[tool.scikit-build.sdist]
# Ensure third-party notices are included in the source distribution
include = [
  "LICENSE",
  "THIRD_PARTY_NOTICES.md",
]

# pyproject.toml  (add/merge these)

[tool.scikit-build]
# Make builds consistent & fast; scikit-build-core will fetch Ninja/CMake if needed.
minimum-version = "build-system.requires"
cmake.version = ">=3.26.1"
ninja.version = ">=1.11"
ninja.make-fallback = false

# Static CMake options used everywhere
[tool.scikit-build.cmake.define]
HF_USE_OPENMP = true
HF_USE_FFTW_THREADS = true
# Drive the CMake deployment target from the env (falls back to 11.0)
CMAKE_OSX_DEPLOYMENT_TARGET = { env = "MACOSX_DEPLOYMENT_TARGET", default = "11.0" }

# ---------- cibuildwheel: shared options ----------
[tool.cibuildwheel]
# Which CPython tags to build on release
build = "cp310-* cp311-* cp312-*"
# Skip pypy & musllinux for this project
skip = "pp* *-musllinux_*"

# Test setup
test-requires = ["numpy"]
test-command = "python ci/smoke_test.py"

# Linux before-all (runs inside the manylinux container)
[tool.cibuildwheel.linux]
before-all = "bash ci/linux_before_all.sh"
# Pin images explicitly (matches your workflow intent)
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"

# macOS settings (applies to both Intel & ARM runners)
[tool.cibuildwheel.macos]
# Build for the host arch (x86_64 on Intel runner, arm64 on ARM runner)
archs = ["native"]
# Ensure delocate finds your locally built FFTW (ARM) or Homebrew libs
repair-wheel-command = """
delocate-wheel -L $HOME/.local/lib -L /opt/homebrew/lib -L /usr/local/lib \
  --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
"""

# macOS environment during wheel builds
[tool.cibuildwheel.macos.environment]
# Deployment baseline (used by scikit-build via CMAKE_OSX_DEPLOYMENT_TARGET define above)
MACOSX_DEPLOYMENT_TARGET = "11.0"
# Help CMake/pkg-config find user-local FFTW on ARM builds (safe no-ops on Intel)
PKG_CONFIG_PATH = "$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH"
CMAKE_PREFIX_PATH = "$HOME/.local:$CMAKE_PREFIX_PATH"
LIBRARY_PATH = "$HOME/.local/lib:$HOME/.local/lib64:$LIBRARY_PATH"
CPATH = "$HOME/.local/include:$CPATH"
