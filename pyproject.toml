[build-system]
requires = [
  "scikit-build-core>=0.9",
  "pybind11>=2.11",
  "numpy",
  "setuptools_scm>=7",
]
build-backend = "scikit_build_core.build"

[project]
name = "cpp_hf"
dynamic = ["version"]
description = "Hartreeâ€“Fock (k-grid) with FFTW + Eigen via pybind11"
readme = "Readme.md"
requires-python = ">=3.8"
authors = [{name = "ContiMod contributors"}]
license = {file = "LICENSE"}
keywords = ["hartree-fock", "fftw", "eigen", "pybind11", "condensed-matter", "physics"]
classifiers = [
  "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: C++",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Topic :: Scientific/Engineering :: Physics",
]

[project.urls]
Homepage = "https://github.com/skilledwolf/cpp_hf"
Issues = "https://github.com/skilledwolf/cpp_hf/issues"

[tool.scikit-build]
# Optional: produce a per-tag build dir (nice for local dev)
build-dir = "build/{wheel_tag}"
# Required to enable non-builtin metadata version providers (setuptools_scm)
experimental = true

[tool.scikit-build.cmake]
version = ">=3.21"

# You can pass -C cmake.define.X=... flags via pip to toggle features:
#   pip install . -C cmake.define.HF_USE_OPENMP=ON -C cmake.define.HF_USE_FFTW_THREADS=ON

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.setuptools_scm"

[tool.setuptools_scm]
# Strip leading 'v' from tags like v1.2.3 automatically
version_scheme = "guess-next-dev"
local_scheme = "node-and-date"
fallback_version = "0.0"

[tool.scikit-build.wheel]
# Ensure license and notices are embedded in the wheel metadata
license-files = [
  "LICENSE",
  "THIRD_PARTY_NOTICES.md",
]

[tool.scikit-build.sdist]
# Ensure third-party notices are included in the source distribution
include = [
  "LICENSE",
  "THIRD_PARTY_NOTICES.md",
]

[tool.cibuildwheel]
build = "cp310-* cp311-* cp312-*"
skip = "pp*"
test-requires = ["numpy"]
test-command = "python ci/smoke_test.py"

before-all = "bash ci/linux_before_all.sh"

[tool.cibuildwheel.macos]
environment = [
  "PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig",
  "CMAKE_PREFIX_PATH=$HOME/.local",
  "LIBRARY_PATH=$HOME/.local/lib:$HOME/.local/lib64",
  "CPATH=$HOME/.local/include",
  'CMAKE_ARGS="-DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON"'
]
repair-wheel-command = [
  'delocate-listdeps -d {wheel} || true',
  'delocate-wheel -L $HOME/.local/lib -L /opt/homebrew/lib -L /usr/local/lib --require-archs {delocate_archs} -w {dest_dir} -v {wheel}'
]

[tool.cibuildwheel.linux]
environment = [
  "CC=gcc", "CXX=g++",
  'CMAKE_ARGS="-G Ninja -DHF_USE_OPENMP=ON -DHF_USE_FFTW_THREADS=ON"'
]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"